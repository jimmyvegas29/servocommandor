I want to build an gui app to control a servo motor. The application will need to run on a raspberry pi zero 2w with a waveshare can hat and a 5 inch touch screen 800x540 resolution. There will be 3 physical switches installed with LED's to the raspberry pi, 2 of them will be momentary switches the 3rd will be a toggle.  

Use the application gui will need to look like the layout in servocom_template.png in this folder. 


Functionality

The servo speed rpm area of the gui will be a real time update of the current rpm of the servo which the application will need to request from the servo driver via rs485 RTU ever 100ms, it will start off displaying a single 0 and can go up to 3000, when only a single digit is displayed the 3 remaining digits will be represented like the 2 shade ones in slot 1 and 2 of the servo speed rpm area. when there is a missing digit i.e. if the speed is set to 500 then slot 1 will have a shaded 0. If the speed is 1000 or above then all for slots will have a white digit and no shaded digits will be visible. 

The boxes that read 50-2000 will be button that when pressed the button background will be highlighted in neon green and the application will send a set speed command to the servo driver via rs485 RTU

the +50 and -50 will take the current set speed if 50 or greater and either added to the current speed or subtract from it and send another speed command to the servo drive via rs485 rtu. The maximum rpm that will be allow to be sent to the servo driver via rs485 rtu will be 3000. so if the the math between hitting the +50 button plus the current speed exceeds 3000, do not send the command. when pressed these buttons will high light in neon green for 300ms and then return to previous color

the custom button when pressed will pop up with a number pad that takes up the entire screen and has an area at the top to show the input as you press the numbers, there will need to be an enter key that when pressed will send a speed command to the servo drive via rs485 rtu with the amount entered in the custom box and the screen will return back to the main screen and the custom button will remain highlighted until either one of the buttons for a preset speed command (i.e. 50-2000 buttons) is selected or the servo is disabled via momentary switch #2 (red led) or the +50 or -50 buttons are pressed. The numberpad popup will retain the custom number so that if you press the custom button again the number pad will pop up again with the previously entered number. In the custom number pad there will also need to be a Clear button and a Delete button. The clear button will clear the entire amount entered, the delete button will only delete the last digit entered. There will also need to be an X in the top left corner incase the user wants to cancel out of the custom popup, when pressed it will exit the number pad pop up and the custom button will not be highlighted and no commands will be sent to the servo driver. 

the FWD and REV button will be like a toggle switch, when the application first start FWD will be highlight in the blue color, if the REV is pressed it will highlight in the blue color and the FWD background will change to the gray background of the REV button. When the FWD button is toggled nothing will need to change, if the REV button is toggled then this will make it so that any number sent via the speed command will be a negative number represented with a - and when the FWD button is toggled the numbers will be sent as positive. 


Momentary switch #1 (green LED) when pressed will send an enable command to the servo driver via rs485 RTU. the application will need to query the current status of the servo driver, it will receive this information as part of a bulk rs458 rtu request sent with the request for the current RPM. If the current status for the servo driver is enabled and this button is pressed again then a disable command should be sent and the servo drive will be disabled however the driver will retain its current rpm setting. If the current status of the servo driver is disabled and this button is pressed then an enable command will be sent.

Momentary switch #2 (red LED) when pressed will send a speed command to set it to 0 and it will also send a servo driver disable command, it will also clear out any highlight on the predefined speed button(50-2000 buttons) or the customer button and clear out the saved speed amount in the custom number pad popup. 

Im not sure what im going to do with the 3rd button, the toggle button, its an estop style button but im not sure of how i want it to function yet so we wont do anything with this yet. 

The servo driver is communicated with via the RS485 Can hat using RS485 RTU here are some details about the setting. 

Baudrate is 9600
Slave ID of the servo driver is 1
Check bit none and stop bit 1

Enable servo command is 0x0062, value for enabled = 1 and value for disable = 0
Speed command is 0x0089 and accepts -3000 to +3000 for a value
To read the current rpm of the servo motor from the drive the hex is 0x0000(when requested via 04H) and 0x1000(when requested via 03H)


